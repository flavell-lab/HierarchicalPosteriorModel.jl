var documenterSearchIndex = {"docs":
[{"location":"fit/#Hierarchical-Posterior-Model-Fitting-API","page":"Hierarchical Posterior Model Fitting API","title":"Hierarchical Posterior Model Fitting API","text":"","category":"section"},{"location":"fit/#Data-IO","page":"Hierarchical Posterior Model Fitting API","title":"Data IO","text":"","category":"section"},{"location":"fit/","page":"Hierarchical Posterior Model Fitting API","title":"Hierarchical Posterior Model Fitting API","text":"get_Ps\nget_datasets\nconvert_hbdatasets_to_behs","category":"page"},{"location":"fit/#HierarchicalPosteriorModel.get_Ps","page":"Hierarchical Posterior Model Fitting API","title":"HierarchicalPosteriorModel.get_Ps","text":"get_Ps(fit_results, matches, θh_pos_is_ventral; idx_use=[1,2,3,4,7], datasets_use=nothing, rngs_use=nothing, max_rng=2)\n\nReturn a vector of matrices containing the parameter sets for given matches and conditions.\n\nArguments\n\nfit_results: A dictionary containing the CePNEM fit results for each dataset.\nmatches: A list of tuples corresponding to a given neuron, with dataset and the corresponding index in the traces.\nθh_pos_is_ventral: A dictionary mapping dataset to a boolean indicating if positive θh corresponds to ventral head curvature (as opposed to dorsal).\nidx_use: An optional array of indices of the parameters to be used. Default is [1,2,3,4,7].\ndatasets_use: An optional list of dataset indices to be used. If not provided, all datasets in matches are used.\nrngs_use: An optional dictionary mapping dataset indices to lists of range indices to be used. If not provided, all ranges are used.\nmax_rng: An optional integer specifying the maximum number of ranges to be used. Default is 2.\n\nReturns\n\nPs: A vector of matrices containing the parameter sets for the given matches and conditions.\n\n\n\n\n\n","category":"function"},{"location":"fit/#HierarchicalPosteriorModel.get_datasets","page":"Hierarchical Posterior Model Fitting API","title":"HierarchicalPosteriorModel.get_datasets","text":"get_datasets(matches; datasets_use=nothing, rngs_use=nothing)\n\nRetrieve datasets based on the given matches and optional filtering criteria.\n\nArguments\n\nfit_results::Dict: A dictionary containing the CePNEM fit results for each dataset.\nmatches::Vector: A list of tuples containing the dataset identifier and the number of samples.\ndatasets_use::Union{Vector{String}, Nothing}: An optional list of dataset identifiers to include. If not provided, all datasets in matches will be used.\nrngs_use::Union{Dict, Nothing}: An optional dictionary of dataset identifiers with a list of range indices to include. If not provided, all ranges will be used.\n\nReturns\n\ndatasets: A list of tuples containing the selected dataset identifier, range index, and number of samples.\n\n\n\n\n\n","category":"function"},{"location":"fit/#HierarchicalPosteriorModel.convert_hbdatasets_to_behs","page":"Hierarchical Posterior Model Fitting API","title":"HierarchicalPosteriorModel.convert_hbdatasets_to_behs","text":"convert_hbdatasets_to_behs(fit_results::Dict, hbdatasets::Vector; max_len::Int=800)\n\nConvert the given hbdatasets into separate v, θh, and P arrays based on fit_results.\n\nArguments\n\nfit_results::Dict: A dictionary containing the results of a model fitting process.\nhbdatasets::Vector: A list of tuples containing the selected dataset identifier, range index, and number of samples.\nθh_pos_is_ventral::Dict{String, Bool}: Whether the θh values in the datasets are in ventral or dorsal coordinates.\nmax_len::Int (optional, default 800): The maximum length of each dataset.\n\nReturns\n\nv: A vector containing the concatenated v values from the datasets.\nθh: A vector containing the concatenated θh values from the datasets.\nP: A vector containing the concatenated P values from the datasets.\n\n\n\n\n\n","category":"function"},{"location":"fit/#Model-Fitting","page":"Hierarchical Posterior Model Fitting API","title":"Model Fitting","text":"","category":"section"},{"location":"fit/","page":"Hierarchical Posterior Model Fitting API","title":"Hierarchical Posterior Model Fitting API","text":"initialize_params\nfit_multivariate_normals\noptimize_MAP","category":"page"},{"location":"fit/#HierarchicalPosteriorModel.initialize_params","page":"Hierarchical Posterior Model Fitting API","title":"HierarchicalPosteriorModel.initialize_params","text":"initialize_params(Ps::Vector{Matrix{Float64}}; idx_scaling::Vector{Int64}=[2,3,4])\n\nInitialize the model parameters based on the given parameter samples Ps.\n\nArguments\n\nPs::Vector{Matrix{Float64}}: A vector of matrices containing the CePNEM parameter samples for each dataset.\nidx_scaling::Vector{Int64}: An optional vector of indices indicating the parameters that need to be transformed to Cartesian coordinates for comparison into mvns.   Currently, it is not supported for this to be any value other than its default [2,3,4].\n\nReturns\n\nHBParams: A HBParams instance containing the initialized values for mu, sigma, and x parameters.\n\n\n\n\n\n","category":"function"},{"location":"fit/#HierarchicalPosteriorModel.fit_multivariate_normals","page":"Hierarchical Posterior Model Fitting API","title":"HierarchicalPosteriorModel.fit_multivariate_normals","text":"fit_multivariate_normals(Ps::Vector{Matrix{Float64}})\n\nFits multivariate normal distributions to a set of input matrices.\n\nArguments\n\nPs::Vector{Matrix{Float64}}: A vector of matrices, each representing a set of data points.\n\nReturns\n\nA vector of fitted MvNormal objects.\n\n\n\n\n\n","category":"function"},{"location":"fit/#HierarchicalPosteriorModel.optimize_MAP","page":"Hierarchical Posterior Model Fitting API","title":"HierarchicalPosteriorModel.optimize_MAP","text":"optimize_MAP(Ps::Vector{Matrix{Float64}}, params_init::HBParams; idx_scaling::Vector{Int64}=[2,3,4])\n\nOptimize the maximum a posteriori (MAP) estimate for the given parameter samples Ps and initial parameters params_init.\n\nArguments\n\nPs::Vector{Matrix{Float64}}: A vector of matrices containing the CePNEM parameter samples for each dataset.\nparams_init::HBParams: A HBParams instance containing the initial values for mu, sigma, and x parameters.\nidx_scaling::Vector{Int64}: An optional vector of indices indicating the parameters that need to be transformed to Cartesian coordinates for comparison into mvns.   Currently, it is not supported for this to be any value other than its default [2,3,4].\nmax_iters::Int64: An optional integer indicating the maximum number of iterations for the optimization process. Default 200.\nmvns::Union{Vector, Nothing}: An optional vector of multivariate normal distributions corresponding to the data. If nothing, they will be computed.\n\nReturns\n\nparams_opt_struct: A HBParams instance containing the optimized values for mu, sigma, and x parameters.\nresult: The result of the optimization process.\n\n\n\n\n\n","category":"function"},{"location":"model/#Hierarchical-Posterior-Model-API","page":"Hierarchical Posterior Model API","title":"Hierarchical Posterior Model API","text":"","category":"section"},{"location":"model/","page":"Hierarchical Posterior Model API","title":"Hierarchical Posterior Model API","text":"HBParams\njoint_logprob\njoint_logprob_flat\nconvert_hbparams_to_ps\ncompute_cartesian_average","category":"page"},{"location":"model/#HierarchicalPosteriorModel.HBParams","page":"Hierarchical Posterior Model API","title":"HierarchicalPosteriorModel.HBParams","text":"struct HBParams\n\nA structure for holding the mean (mu), standard deviation (sigma), and the spherical coordinates (x) of a model.\n\nFields\n\nmu::Vector{Float64}: A vector of the global mean estimate for each parameter.\nsigma::Vector{Float64}: A vector of the global standard deviation estimate for each parameter.\nx::Vector{Vector{Float64}}: A vector of vectors representing the best parameters for each individual dataset.\n\n\n\n\n\n","category":"type"},{"location":"model/#HierarchicalPosteriorModel.joint_logprob","page":"Hierarchical Posterior Model API","title":"HierarchicalPosteriorModel.joint_logprob","text":"joint_logprob(params::HBParams, data::Vector{Matrix{Float64}}, mvns::Vector; idx_scaling::Vector{Int64}=[2,3,4])\n\nCompute the joint log probability of a HBParams instance given the data and multivariate normal distributions (mvns).\n\nArguments\n\nparams::HBParams: A HBParams instance containing the mu, sigma, and x parameters.\ndata::Vector{Matrix{Float64}}: A vector of matrices representing the data (CePNEM fit parameters) for each dataset.\nmvns::Vector: A vector of multivariate normal distributions corresponding to the data.\nidx_scaling::Vector{Int64}: An optional vector of indices indicating the parameters that need to be transformed to Cartesian coordinates for comparison into mvns.\n\nCurrently, it is not supported for this to be any value other than its default, [2,3,4].\n\nReturns\n\nlogprob: The computed joint log probability of the given parameters.\n\n\n\n\n\n","category":"function"},{"location":"model/#HierarchicalPosteriorModel.joint_logprob_flat","page":"Hierarchical Posterior Model API","title":"HierarchicalPosteriorModel.joint_logprob_flat","text":"joint_logprob_flat(params_flat::Vector, data::Vector{Matrix{Float64}}, mvns::Vector, idx_scaling::Vector{Int64})\n\nCompute the joint log probability of a flat parameter vector given the data, multivariate normal distributions (mvns), and scaling indices (idx_scaling).\n\nArguments\n\nparams_flat::Vector: A flat vector containing the concatenated mu, sigma, and x parameters.\ndata::Vector{Matrix{Float64}}: A vector of matrices representing the data (CePNEM fit parameters) for each dataset.\nmvns::Vector: A vector of multivariate normal distributions corresponding to the data.\nidx_scaling::Vector{Int64}: A vector of indices indicating the parameters that need to be transformed to Cartesian coordinates for comparison into mvns.   Currently, it is not supported for this to be any value other than [2,3,4].\n\nReturns\n\nlogprob: The computed joint log probability of the given parameters.\n\n\n\n\n\n","category":"function"},{"location":"model/#HierarchicalPosteriorModel.convert_hbparams_to_ps","page":"Hierarchical Posterior Model API","title":"HierarchicalPosteriorModel.convert_hbparams_to_ps","text":"convert_hbparams_to_ps(hbparams::Vector{Float64})\n\nConvert the given hbparams 5-vector of mu or x from HBParams into a new psvector with 8 elements compatible withmodel_nl8`.\n\nArguments\n\nhbparams::Vector{Float64}: A vector of hierarchical model parameters.\n\nReturns\n\nps: A new 8-element vector containing the converted hbparams.\n\n\n\n\n\n","category":"function"},{"location":"model/#HierarchicalPosteriorModel.compute_cartesian_average","page":"Hierarchical Posterior Model API","title":"HierarchicalPosteriorModel.compute_cartesian_average","text":"computecartesianaverage(hbparams::HBParams)\n\nCompute the Cartesian average of the given hierarchical Bayesian parameters.\n\nArguments\n\nhbparams::HBParams: A hierarchical Bayesian parameter object.\n\nReturns\n\nps_tot::Vector{Float64}: The Cartesian average of the given hierarchical Bayesian parameters.\n\n\n\n\n\n","category":"function"},{"location":"#HierarchicalPosteriorModel.jl-Documentation","page":"HierarchicalPosteriorModel.jl Documentation","title":"HierarchicalPosteriorModel.jl Documentation","text":"","category":"section"},{"location":"","page":"HierarchicalPosteriorModel.jl Documentation","title":"HierarchicalPosteriorModel.jl Documentation","text":"The HierarchicalPosteriorModel.jl package implements a Bayesian hierarchical model for analyzing CePNEM model fits of the same neuron recorded in multiple animals. It can incorporate uncertainty information from CePNEM to create global metrics of typical encoding and encoding variability.","category":"page"},{"location":"","page":"HierarchicalPosteriorModel.jl Documentation","title":"HierarchicalPosteriorModel.jl Documentation","text":"Pages = [\"model.md\", \"fit.md\", \"variability.md\"]","category":"page"},{"location":"variability/#Simulation-Based-Calibration-API","page":"Simulation-Based Calibration API","title":"Simulation-Based Calibration API","text":"","category":"section"},{"location":"variability/","page":"Simulation-Based Calibration API","title":"Simulation-Based Calibration API","text":"rank_test\nχ2_uniformtest","category":"page"}]
}
